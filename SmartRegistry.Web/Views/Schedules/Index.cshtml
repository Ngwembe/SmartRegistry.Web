@model IEnumerable<SmartRegistry.Web.Models.Schedule>

<link href="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/fullcalendar.min.css" rel="stylesheet" />
<link href="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/scheduler.min.css" rel="stylesheet" />

<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />

<script src="~/lib/moment/moment.js"></script>
@*<script src="~/lib/moment/moment-with-locales.js"></script>*@

@*<link href="~/lib/jquery-ui-1.12.1.custom/css/jquery-ui.min.css" rel="stylesheet" />
    <link href="~/lib/jquery-ui-1.12.1.custom/css/jquery-ui.structure.css" rel="stylesheet" />
    <link href="~/lib/jquery-ui-1.12.1.custom/css/jquery-ui.theme.css" rel="stylesheet" />*@

<div class="content-page">
    <!-- Start content -->
    <div class="content">
        <div class="container">

            @{
                ViewData["Title"] = "Index";
            }

            <div class="row">
                <div class="col-md-12">
                    <div class="card-box">
                        @*<h4 class="header-title m-t-0 m-b-30">Messages</h4>*@
                        <h2 class="text-center"><b>Subject Schedules</b></h2>

                        <div class="inbox-widget slimscroll-alt" style="min-height: 202px;">
                            <div Class="col-md-12">


                                <a class="btn btn-primary pull-right hide" asp-action="Create" style="margin: 10px 1px; margin-bottom: 1%;">Add Schedule</a>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>
                                                @Html.DisplayNameFor(model => model.LectureRoom)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.IsConfirmed)
                                            </th>
                                            @*<th>
                                                    @Html.DisplayNameFor(model => model.CreatedBy)
                                                </th>*@
                                            <th>
                                                @Html.DisplayNameFor(model => model.ScheduleFor)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.ScheduleTo)
                                            </th>
                                            <th>
                                                @Html.DisplayNameFor(model => model.Subject)
                                            </th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.Any())
                                        {
                                            @foreach (var item in Model)
                                            {
                                                <tr>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.LectureRoom)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.IsConfirmed)
                                                    </td>
                                                    @*<td>
                                                            @Html.DisplayFor(modelItem => item.CreatedBy)
                                                        </td>*@
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.ScheduleFor)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.ScheduleTo)
                                                    </td>

                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.Subject.Code)
                                                    </td>
                                                    <td>
                                                        <a asp-action="Edit" asp-route-id="@item.ScheduleId" class="btn btn-secondary">Edit</a> |
                                                        <a asp-action="Details" asp-route-id="@item.ScheduleId" class="btn btn-info">Details</a> |
                                                        <a asp-action="Delete" asp-route-id="@item.ScheduleId" class="btn btn-danger">Delete</a>

                                                        @if (!item.IsConfirmed)
                                                        {
                                                            <a asp-action="ConfirmSchedule" asp-route-id="@item.ScheduleId" class="btn btn-primary">Confirm</a>
                                                        }

                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr class="text-center">
                                                <td>
                                                    <p>There are currently no schedules for the subject.</p>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </div>
                        </div>

                    </div> <!-- end card -->
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="card-box">
                        @*<h4 class="header-title m-t-0 m-b-30">Messages</h4>*@
                        <h2 class="text-center"><b>Subject Calendar Schedules</b></h2>

                        <div class="inbox-widget slimscroll-alt" style="min-height: 460px;">
                            <div id="calendar"></div>
                        </div>

                    </div> <!-- end card -->
                </div>
            </div>



            <div class="row">
                <div class="modal fade" id="eventView">
                    <div class="fade in" role="dialog">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <p id="eventViewHeader" class="text-center text-capitalize"></p>
                                </div>
                                <div class="modal-body">
                                    <h2 class="text-center" id="eventViewVenue"></h2>
                                    <p id="eventViewBody"></p>
                                </div>
                                <div class="modal-footer">
                                    <a href="#" class="btn btn-primary pull-right" id="btnConfirmLecture">Confirm</a>
                                    <a href="#" class="btn pull-left close" data-dismiss="modal">Close</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="createModal"></div>
            </div>

            <div class="row">
                <div class="modal fade" id="updateSuccessModal">
                    <div class="fade in" role="dialog">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <p class="text-center text-capitalize">SCHEDULE UPDATE</p>
                                </div>
                                <div class="modal-body">
                                    @*<h2 class="text-center" id="eventViewVenue"></h2>*@
                                    <p>The schedule has been updated successfully!</p>
                                </div>
                                <div class="modal-footer">
                                    <a href="#" class="btn btn-primary pull-right" data-dismiss="modal">OK</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="createModal"></div>
            </div>

            <div class="row">
                <div class="modal fade" id="createSuccessModal">
                    <div class="fade in" role="dialog">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <p class="text-center text-capitalize">SCHEDULE CREATE</p>
                                </div>
                                <div class="modal-body">
                                    @*<h2 class="text-center" id="eventViewVenue"></h2>*@
                                    <p>The schedule has been created successfully!</p>
                                </div>
                                <div class="modal-footer">
                                    <a href="#" class="btn btn-primary pull-right" data-dismiss="modal">OK</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="createModal"></div>
            </div>

        </div>
        <!-- container -->

    </div> <!-- content -->

    <footer class="footer text-right">
        @{
            <i>@string.Format("{0} © SmartRegistry", DateTime.Now.Year)</i>
        }

    </footer>

</div>

@section Scripts {
    <script src="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/jquery.min.js"></script>
    <script src="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/moment.min.js"></script>
    <script src="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/fullcalendar.min.js"></script>
    <script src="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/theme-chooser.js"></script>
    <script src="~/lib/fullcalendar.io/js/fullcalendar-3.5.0/scheduler.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>

    <script src="~/lib/jquery-ui-1.12.1.custom/js/jquery-ui.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>


    <script type="text/javascript">
        $(function () {
            //$.fn.modal.Constructor.prototype.enforceFocus = function () { };    //  For bootstrap 3
            $.fn.modal.Constructor.prototype._enforceFocus = function () { };   //  For bootstrap 4


            //$('.date').datepicker({
            //    beforeShowDay: $.datepicker.noWeekends,
            //    dateFormat: "dd/MM/yyyy HH:mm:ss.fff"
            //});

            /*
            let calendar = $("#calendar").fullCalendar({
                weekends: true, //false // will hide Saturdays and Sundays
                businessHours: true,
                dayClick: function (date, jsEvent, view, resourceObj) {
                    alert(`Date: ${date.format()}`);
                    //alert('Date: ' + date.format());
                    //alert('Resource ID: ' + resourceObj.id);
                    //console.log('Resource ID: ' + resourceObj.id);
                },
                //addResource: {
                //    id: 'e',
                //    title: 'Room E'
                //},
            });
            */

            var events = [];

            getSchedules = function () {
                $.ajax({
                    type: "GET",
                    url: "/Schedules/GetSchedules",
                    success: function (data) {

                        $.each(data,
                            function (i, event) {
                                console.log(event);
                                events.push({
                                    //id: event.id,
                                    //title: `${event.subject.code} AT ${event.lectureRoom}`,
                                    //start: moment(event.scheduleFor,"yyyy-dd-mm HH:ii:ss"),
                                    //end: event.scheduleTo != null ? moment(event.scheduleTo, "yyyy-dd-mm HH:ii:ss") : null,
                                    //allDay: false,
                                    //lectureRoom: event.lectureRoom,
                                    //isConfirmed: event.isConfirmed
                                    id: event.id,
                                    title: `${event.subject.code} AT ${event.lectureRoom}`,
                                    start: event.scheduleFor != null ? moment(event.scheduleFor) : null, // moment(event.scheduleFor),
                                    end: event.scheduleTo != null ? moment(event.scheduleTo) : null,
                                    allDay: false,
                                    lectureRoom: event.lectureRoom,
                                    isConfirmed: event.isConfirmed
                                });

                                //console.log(events[i]);
                            });

                        generateCalendar(events);

                    },
                    error: function (err) {
                        alert(err);
                    }
                });
            };

            getSchedules();

            var $selectedSchedule = null;

            function generateCalendar(eventData) {
                //console.log("EVENTS");
                //console.log(eventData);

                $('#calendar').fullCalendar('destroy');

                $('#calendar').fullCalendar({
                    events: eventData,
                    //weekends: true, //false // will hide Saturdays and Sundays
                    businessHours: true,
                    contentHeight: 400,
                    dafaultDate: new Date(),
                    timeFormat: 'h(:mm)a',
                    //default: { hours: 1, minutes: 30 },
                    slotDuration: '01:30:00',
                    allDaySlot: false,
                    allDayDefault: false,
                    nowIndicator: true,
                    selectOverlap: false,
                    eventStartEditable: true,
                    eventDurationEditable: true,
                    editable: true,
                    eventResize: function (event) {
                        var start = $.fullCalendar.formatDate(event.start, "DD-MM-YYYY HH:mm:ss a");
                        var end = $.fullCalendar.formatDate(event.end, "DD-MM-YYYY HH:mm:ss a");

                        var title = event.title;
                        var id = event.id;
                        var isConfirmed = event.isConfirmed;
                        var lectureRoom = event.lectureRoom;
                        //console.log(`START: ${start} \nEND: ${end} \nTITLE: ${title} \nID: ${id} \nLecture Room: ${lectureRoom} \nIs Confirmed: ${isConfirmed}`);
                        //Id,LectureRoom,IsConfirmed,CreatedBy,CreatedAt,LastUpdatedBy,LastUpdatedAt,IsDeleted,DeletedBy,DeletedAt,SubjectId
                        /*
                             id: event.id,
                             title: `${event.subject.code} AT ${event.lectureRoom}`,
                             start: moment(event.scheduleFor),
                             end: event.scheduleTo != null ? moment(event.scheduleTo) : null,
                             allDay: false,
                             lectureRoom: event.lectureRoom,
                             isConfirmed: event.isConfirmed
                         */
                        var scheduler = {
                            id: id,
                            scheduleFor: /*start,*/ moment(event.start, 'DD-MMM-YYYY, hh:mm A').format('DD-MMM-YYYY hh:mm A'),
                            scheduleTo: /*end,*/ moment(event.end, 'DD-MMM-YYYY, hh:mm A').format('DD-MMM-YYYY hh:mm A'),
                            lectureRoom: lectureRoom,
                            subjectId: id,
                            isConfirmed: isConfirmed
                        };

                        //console.log(moment(event.start, 'ddd DD-MMM-YYYY, hh:mm A').format('dd DD-MMM-YYYY hh:mm A'));
                        //console.log(moment(event.end, 'ddd DD-MMM-YYYY, hh:mm A').format('dd DD-MMM-YYYY hh:mm A'));


                        console.log(scheduler);

                        $.ajax({
                            type: "POST",
                            url: "/Schedules/Edit",
                            data: { id: id, schedule: scheduler },
                            //data: JSON.stringify({
                            //    id: id,
                            //    scheduleFor: start,
                            //    scheduleTo: end,
                            //    lectureRoom: lectureRoom,
                            //    subjectId: id,
                            //    isConfirmed: isConfirmed
                            //}),
                            async: true,
                            success: function (response) {
                                $('#createEventViewModal').modal('hide');
                                $('#createSuccessModal').modal('hide');
                                $('#updateSuccessModal').modal('show');
                            }
                        });
                    },
                    //duration: {hours: 1, minutes: 30},
                    header: {
                        left: 'prev,next,today',
                        center: 'title',
                        right: 'month,basicWeek,basicDay,agenda'
                    },
                    selectable: true,
                    selectHelper: true,
                    select: function (start, end, allDay) {
                        //var add = prompt("Set a new schedule?");
                        //if (add) {
                        //var lectureRoom = prompt("Enter Lecture Room");
                        //if (lectureRoom) {

                        var selectedDate = {
                            startDate: new Date(start),
                            endDate: new Date(end) //,
                            //isAllDay: allDay,
                            //title: add,
                            //lectureRoom: lectureRoom
                        };

                        var startDate = new Date(start);
                        var endDate = new Date(end);

                        //startDate = `${startDate.getDate()}/${startDate.getMonth()}/${startDate.getFullYear()}`;
                        //endDate = `${endDate.getDate()}/${endDate.getMonth()}/${endDate.getFullYear()}`;
                        //return;
                        var check = moment(start, 'DD-MMM-YYYY, hh:mm A').format('DD-MMM-YYYY hh:mm A');
                        //var check = $.fullCalendar.formatDate(start, 'yyyy-MM-dd');
                        console.log({ check });
                        var today = moment(new Date(), 'DD-MMM-YYYY, hh:mm A').format('DD-MMM-YYYY hh:mm A');
                        //var today = $.fullCalendar.formatDate(new Date(), 'yyyy-MM-dd');
                        console.log({today});

                        if (check >= today) {
                            console.log("Previous day selected ...");

                            return $.ajax({
                                type: "POST",
                                url: "/Schedules/GetCreateModalPartialView",
                                data: {
                                    scheduleFor: new Date(start).toJSON(),
                                    scheduleTo: new Date(end).toJSON()
                                    //,title: add,
                                    //lectureRoom: lectureRoom
                                },

                                //JSON.stringify(selectedDate),//{startDate: selectedDate.startDate, endDate: selectedDate.endDate}, // //.serialize(),
                                success: function(data) {
                                    $('#createModal').empty().html(data);

                                    $('.date').datepicker({
                                        beforeShowDay: $.datepicker.noWeekends,
                                        dateFormat: "dd/MM/yyyy HH:mm"
                                        //dateFormat: "dd/MM/yyyy HH:mm:ss.fff"
                                    });

                                    $('#createEventViewModal').modal('show');

                                    $('.select2').select2();
                                    //$('.select2.subjects').select2({
                                    //    ajax: {
                                    //        url: '/Subjects/GetMatchingSubjects',
                                    //        async: true,
                                    //        data: function (params) {
                                    //            var query = {
                                    //                searchKey: params.term,
                                    //                type: 'public'
                                    //            }
                                    //            // Query parameters will be ?searchKey=[term]&type=public
                                    //            return query;
                                    //        },
                                    //        processResults: function (data) {
                                    //            // Tranforms the top-level key of the response object from 'items' to 'results'

                                    //            var subjects = JSON.parse(data);
                                    //            console.log(subjects);

                                    //            return {
                                    //                //results: data.items
                                    //                //results: JSON.parse(data)
                                    //                //results: data
                                    //                results: JSON.stringify(data)
                                    //            };
                                    //        }
                                    //    }
                                    //});

                                    $('#saveSchedule').on('click',
                                        function(e) {
                                            e.preventDefault();

                                            $('#createEventViewModal').modal('hide');

                                            var scheduleForm = $('#add-patient').serializeArray();

                                            console.log(scheduleForm);

                                            $.ajax({
                                                type: "POST",
                                                url: '/Schedules/Create',
                                                dataType: 'json',
                                                contentType: 'application/json',
                                                data: JSON.stringify(scheduleForm),
                                                success: (e) => {
                                                    e.preventDefault();

                                                    $('#createEventViewModal').modal('hide');
                                                    $('#createSuccessModal').modal('show');

                                                    getSchedules();
                                                }
                                            });
                                        });
                                },
                                error: function(err) {
                                    console.log(err);
                                }
                            });
                        } else {
                            console.log("Previous day selected ...");
                        }
                        //}
                        //}
                    },
                    eventLimit: true,
                    eventColor: '#378006',
                    eventClick: function (calEvent, jsEvent, view) {
                        $selectedSchedule = calEvent;

                        $('#eventView #eventViewHeader').text(calEvent.title);
                        $('#eventViewVenue')
                            .text(calEvent.lectureRoom != null ? calEvent.lectureRoom : 'Venue not confirmed');

                        var $description = $('<div/>');

                        $description.append($('<p/>')
                            .html(`<b>Start:</b> ${calEvent.start.format('DD-MMM-YYYY HH:mm a')} `));

                        if (calEvent.end != null) {
                            $description.append($('<p/>')
                                .html(`<b>End:</b> ${calEvent.end.format('DD-MMM-YYYY HH:mm a')} `));
                        }
                        //$description.append($('<p/>').html(`<b>Descrption:</b> ${calEvent.Description}`));
                        if (calEvent.isConfirmed) {
                            $description.append($('<p/>')
                                .html(`<b class='text-center'>Schedule Confirmed:</b> ${calEvent.isConfirmed
                                    } <i class='glyphicon glyphicon-ok-sign'></i>`));
                        } else {
                            $description.append($('<p/>')
                                .html(`<b class='text-center'>Schedule Confirmed:</b> ${calEvent.isConfirmed
                                    } <i class='glyphicon glyphicon-wrong'></i>`));
                        }

                        if ($selectedSchedule.isConfirmed)
                            $('#btnConfirmLecture').hide();
                        else
                            $('#btnConfirmLecture').show();

                        $('#eventView #eventViewBody').empty().html($description);
                        $('#eventView').modal('show');
                    }
                });
                //$('.draggable').data('duration', '01:30');
            }

            function getFormData(data) {

                var unindexed_array = data;
                var indexed_array = {};

                $.map(unindexed_array, function (n, i) {
                    indexed_array[n['name']] = n['value'];
                });

                return indexed_array;
            }

            $('#btnConfirmLecture').on('click', function (e) {
                e.preventDefault();

                if (confirm("Are you sure you want to confirm the schedule?")) {
                    $.ajax({
                        type: "GET",
                        url: "/Schedules/ConfirmSchedule",
                        data: { scheduleId: $selectedSchedule.id },
                        success: function (data) {
                            //TODO: Show confirmation success
                            $('#eventView').modal('hide');
                            getSchedules();

                            let scheduleId = $selectedSchedule.id;

                            //  ALERT Listeners of the confirmation
                            connection.invoke("SendConfirmationMessageToAll", scheduleId).catch(function (err) {
                                return console.error(err.toString());
                            });

                        },
                        error: function (err) {
                            alert(err);
                        }
                    });
                }
            });
        });

    </script>

    <script src="~/lib/signalr/signalr.min.js"></script>
    <script type="text/javascript">
        "use strict";

        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/messages")
            .build();

        connection.on("ReceiveMessage", function (message) {

            if (message != null && typeof (message) != 'undefined') {
                let msg = message.replace(/b/g, "&amp;").replace(/</g, "&alt;")
                    .replace(/>/g, "&gt;");

                let div = document.createElement("div");
                div.innerHTML = msg + "<hr/>";

                document.getElementById("messages").appendChild(div);
            }
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });

        document.getElementById("sendButton").addEventListener("click", (event) => {

            console.log(document.getElementById("message"));
            console.log(document.getElementById("message").value);

            let message = document.getElementById("message").value;

            connection.invoke("SendMessageToAll", message).catch(function (err) {
                return console.error(err.toString());
            });

            event.preventDefault();
        });

    </script>
}
